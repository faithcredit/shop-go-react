import (
	"context"
	"net/http"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// Define a struct to hold the results of the distinct query
type DistinctResult struct {
	Values []string `json:"values"`
}

// Define the Gin handler that will run the distinct query
func DistinctHandler(c *gin.Context) {
	// Get the MongoDB collection and field to run the distinct on
	collection := c.Param("collection")
	field := c.Param("field")

	// Create the MongoDB client and connect to the database
	clientOptions := options.Client().ApplyURI("mongodb://localhost:27017")
	client, err := mongo.Connect(context.Background(), clientOptions)
	if err != nil {
		c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	// Run the distinct query
	result, err := client.Database("mydatabase").Collection(collection).Distinct(context.Background(), field, bson.M{})
	if err != nil {
		c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	// Create the DistinctResult struct and set the values
	distinctResult := DistinctResult{Values: make([]string, len(result))}
	for i, v := range result {
		distinctResult.Values[i] = v.(string)
	}

	// Render the result as JSON
	c.JSON(http.StatusOK, distinctResult)
}

// Set up the Gin router and define the distinct route
func main() {
	router := gin.Default()

	router.GET("/distinct/:collection/:field", DistinctHandler)

	router.Run(":8080")
}